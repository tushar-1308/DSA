// Min and Max Priority queue



#include <iostream>
#include<bits/stdc++.h>
using namespace std;

struct comparator{
    bool operator()(int p, int q){
        return p > q;
    }
};

int main()
{
    cout<<"priority_queue elems are: ";
    
    // priority_queue<int, vector<int>, comparator> qu;
    priority_queue<int> qu;
    vector<int> vect{
        82,65,8,67,9,87,98,7,1,59,87,4
    };
    
    for(int i=0; i<vect.size(); i++){
        qu.push(vect[i]);
    }
    
    while(qu.size()!=0){
        cout<<qu.top()<<" ";
        qu.pop();
    }
    return 0;
}
eg.
priority_queue elems are: 98 87 87 82 67 65 59 9 8 7 4 1



// How to Sort a nearly Sorted Array(Every element is misplaced by max 2 places)



#include <iostream>
#include<bits/stdc++.h>
using namespace std;

struct comparator{
    bool operator()(int p, int q){
        return p > q;
    }
};

int main()
{
    cout<<"priority_queue elems are: ";
    
    priority_queue<int, vector<int>, comparator> qu;
    // priority_queue<int> qu;
    vector<int> vect{
        2,3,1,4,6,7,5,8,9
    };
    
    for(int i=0; i<=2; i++){
        qu.push(vect[i]);
    }
    
    for(int i=3; i<vect.size(); i++){
        cout<<qu.top()<<" ";
        qu.pop();
        qu.push(vect[i]);
    }
    
    while(qu.size()!=0){
        cout<<qu.top()<<" ";
        qu.pop();
    }
    return 0;
}
eg.
priority_queue elems are: 1 2 3 4 5 6 7 8 9




// Merge K sorted Lists - Solution | Hashmap and Heap


#include <iostream>
#include<bits/stdc++.h>
using namespace std;

struct pairs{
    int li;
    int di;
    int val;
    pairs(int li, int di, int val){
        this->li = li;
        this->di = di;
        this->val = val;
    }
};

struct comparator{
    bool operator()(pairs* p, pairs* q){
        return p->val > q->val;
    }
};

int main()
{
    cout<<"priority_queue elems are: ";
    
    priority_queue<pairs*, vector<pairs*>, comparator> qu;
    // priority_queue<int> qu;
    
    vector<vector<int>> vect{
        {10,20,30,40,50},
        {5,7,9,11,19,55,57},
        {1,2,3},
        {32,39}
    };
    
    qu.push(new pairs(0, 0, 10));
    qu.push(new pairs(1, 0, 5));
    qu.push(new pairs(2, 0, 1));
    qu.push(new pairs(3, 0, 32));
    
    while(qu.size()!=0){
        pairs* ans = qu.top();
        cout<<ans->val<<" ";
        qu.pop();
        if(ans->di>=0 && ans->di<vect[ans->li].size()-1){
            qu.push(new pairs(ans->li, ans->di+1, vect[ans->li][ans->di + 1]));
        }
    }
    return 0;
}
eg.
priority_queue elems are: 1 2 3 5 7 9 10 11 19 20 30 32 39 40 50 55 57



// Write Priority Queue(if we want to make our own priority queue:: priority queue is based on Heap mechanism and built using arraylist/vector at backend) using Heap - Solution


// HEAP has 2 properties:
// 1. HOP = Heap order property = Every parent is bigger/smaller(Max/Min Heap) than its childrens
// 2. CBT = Complete binary tree property = every level start fillling from left and every node must have max 2 nodes, 
//          no place can be left between, This property of Binary Heap makes them suitable to be stored in an array.

// to make HEAP, priority queue uses arraylist/vector internally. 

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

vector<int> qu;
vector<int>::iterator itr;

void swap(int a, int b){
    int ans = qu[a];
    qu[a] = qu[b];
    qu[b] = ans;
}

void upheapify(int ci){
    if(ci==0){
        return;
    }
    int pi = (ci-1)/2;
    if(qu[ci]>qu[pi]){
        swap(ci, pi);
        upheapify(pi);
    }
}

void insert(int elem){
    qu.push_back(elem);
    int ci = qu.size()-1;
    upheapify(ci);
}

void downheapify(int pi){
    
    int li = 2*pi+1;
    int ri = 2*pi+2;
    if(li>=qu.size() && ri>=qu.size()){
        return;
    }
    
    int max = pi;
    if(li<qu.size() && qu[li]>qu[max]){
        max = li;
    }
    if(ri<qu.size() && qu[ri]>qu[max]){
        max = ri;
    }
    if(max!=pi){
        swap(pi, max);
        downheapify(max);
    }
    return;
}

void removee(){
    cout<<"Remove element: "<<qu[0]<<endl;
    swap(0, qu.size()-1);
    itr = qu.begin()+qu.size()-1;
    qu.erase(itr);
    downheapify(0);
}

void peek(){
    if(qu.size()==0){
        cout<<"Underflow"<<endl;
    }
    else{
        cout<<"Peek element is: "<<qu[0]<<endl;
    }
}

int main()
{
    
    /*  initial heap 
               45
            /      \
           31      13
          /  \    /  \
         20   7  11   12
        /  \
       7   14
    */
    
    
    // Insert the element to the priority queue
    peek();
    insert(20);
    insert(14);
    peek();
    insert(12);
    insert(31);
    insert(7);
    insert(11);
    peek();
    insert(13);
    insert(7);
    insert(45);
    peek();
    
    for(int i=0; i<qu.size(); i++){
        cout<<qu[i]<<" ";
    }
    cout<<endl;
    
    /*  heap after 1 removal
               31
            /      \
           20      13
          /  \    /  \
         14  7   11   12
        /  
       7   
    */
    
    removee();
    for(int i=0; i<qu.size(); i++){
        cout<<qu[i]<<" ";
    }
    return 0;
}
eg.
Underflow
Peek element is: 20
Peek element is: 31
Peek element is: 45
45 31 13 20 7 11 12 7 14 
Remove element: 45
31 20 13 14 7 11 12 7 



// Linear Time Complexity of Heap


#include <iostream>
#include<bits/stdc++.h>
using namespace std;

vector<int> qu{
    20,14,12,31,7,11,13
};

void swap(int a, int b){
    int ans = qu[a];
    qu[a] = qu[b];
    qu[b] = ans;
}

void downheapify(int pi){
    
    int li = 2*pi+1;
    int ri = 2*pi+2;
    if(li>=qu.size() && ri>=qu.size()){
        return;
    }
    
    int max = pi;
    if(li<qu.size() && qu[li]>qu[max]){
        max = li;
    }
    if(ri<qu.size() && qu[ri]>qu[max]){
        max = ri;
    }
    if(max!=pi){
        swap(pi, max);
        downheapify(max);
    }
}


int main()
{
    for(int i=0; i<qu.size(); i++){
        cout<<qu[i]<<" ";
    }
    cout<<endl;
    
    for(int i=qu.size()/2-1; i>=0; i--){
        downheapify(i);
    }

    for(int i=0; i<qu.size(); i++){
        cout<<qu[i]<<" ";
    }
    return 0;
}
eg.
20 14 12 31 7 11 13 
31 20 13 14 7 11 12 